// <auto-generated />
using System;
using AfterX;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AfterX_backend.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("AfterX.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Cityid")
                        .HasColumnType("integer")
                        .HasColumnName("cityid");

                    b.Property<string>("Number")
                        .HasColumnType("character varying")
                        .HasColumnName("number");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("street");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Cityid", "Street", "Number" }, "address_cityid_street_number_key")
                        .IsUnique();

                    b.ToTable("address");
                });

            modelBuilder.Entity("AfterX.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Countryid")
                        .HasColumnType("integer")
                        .HasColumnName("countryid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<decimal?>("Zip")
                        .HasColumnType("numeric")
                        .HasColumnName("zip");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Countryid", "Name" }, "city_countryid_name_key")
                        .IsUnique();

                    b.ToTable("city");
                });

            modelBuilder.Entity("AfterX.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("Addressid")
                        .HasColumnType("integer")
                        .HasColumnName("addressid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Addressid");

                    b.HasIndex(new[] { "Name", "Addressid" }, "club_name_addressid_key")
                        .IsUnique();

                    b.ToTable("club");
                });

            modelBuilder.Entity("AfterX.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "country_name_key")
                        .IsUnique();

                    b.ToTable("country");
                });

            modelBuilder.Entity("AfterX.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Drinktypeid")
                        .HasColumnType("integer")
                        .HasColumnName("drinktypeid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("Drinktypeid");

                    b.HasIndex(new[] { "Quantity", "Name", "Drinktypeid" }, "drink_quantity_name_drinktypeid_key")
                        .IsUnique();

                    b.ToTable("drink");
                });

            modelBuilder.Entity("AfterX.DrinkClub", b =>
                {
                    b.Property<int>("Drinkid")
                        .HasColumnType("integer")
                        .HasColumnName("drinkid");

                    b.Property<int>("Clubid")
                        .HasColumnType("integer")
                        .HasColumnName("clubid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Drinkid", "Clubid")
                        .HasName("drink_club_pkey");

                    b.HasIndex("Clubid");

                    b.ToTable("drink_club");
                });

            modelBuilder.Entity("AfterX.DrinkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "drinkType_name_key")
                        .IsUnique();

                    b.ToTable("drinkType");
                });

            modelBuilder.Entity("AfterX.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("Clubid")
                        .HasColumnType("integer")
                        .HasColumnName("clubid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("_date");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("Clubid");

                    b.ToTable("event");
                });

            modelBuilder.Entity("AfterX.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Note")
                        .HasColumnType("character varying")
                        .HasColumnName("_note");

                    b.Property<int>("Reservationid")
                        .HasColumnType("integer")
                        .HasColumnName("reservationid");

                    b.Property<int>("Tableid")
                        .HasColumnType("integer")
                        .HasColumnName("tableid");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time without time zone")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.HasIndex("Reservationid");

                    b.HasIndex(new[] { "Tableid", "Reservationid", "Time" }, "order_tableid_reservationid_time_key")
                        .IsUnique();

                    b.ToTable("order");
                });

            modelBuilder.Entity("AfterX.OrderDrink", b =>
                {
                    b.Property<int>("Orderid")
                        .HasColumnType("integer")
                        .HasColumnName("orderid");

                    b.Property<int>("Drinkid")
                        .HasColumnType("integer")
                        .HasColumnName("drinkid");

                    b.Property<short>("Nobottles")
                        .HasColumnType("smallint")
                        .HasColumnName("nobottles");

                    b.HasKey("Orderid", "Drinkid")
                        .HasName("order_drink_pkey");

                    b.HasIndex("Drinkid");

                    b.ToTable("order_drink");
                });

            modelBuilder.Entity("AfterX.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "package_name_key")
                        .IsUnique();

                    b.ToTable("package");
                });

            modelBuilder.Entity("AfterX.PackageDrink", b =>
                {
                    b.Property<int>("Packageid")
                        .HasColumnType("integer")
                        .HasColumnName("packageid");

                    b.Property<int>("Drinkid")
                        .HasColumnType("integer")
                        .HasColumnName("drinkid");

                    b.Property<short>("Nobottles")
                        .HasColumnType("smallint")
                        .HasColumnName("nobottles");

                    b.HasKey("Packageid", "Drinkid")
                        .HasName("package_drink_pkey");

                    b.HasIndex("Drinkid");

                    b.ToTable("package_drink");
                });

            modelBuilder.Entity("AfterX.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<short>("Numberofpeople")
                        .HasColumnType("smallint")
                        .HasColumnName("numberofpeople");

                    b.Property<DateTime>("Reservationdate")
                        .HasColumnType("date")
                        .HasColumnName("reservationdate");

                    b.Property<int>("Tableid")
                        .HasColumnType("integer")
                        .HasColumnName("tableid");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.HasIndex(new[] { "Tableid", "Userid", "Reservationdate" }, "reservation_tableid_userid_reservationdate_key")
                        .IsUnique();

                    b.ToTable("reservation");
                });

            modelBuilder.Entity("AfterX.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Clubid")
                        .HasColumnType("integer")
                        .HasColumnName("clubid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Desciption")
                        .HasColumnType("character varying")
                        .HasColumnName("desciption");

                    b.Property<short?>("Grade")
                        .HasColumnType("smallint")
                        .HasColumnName("grade");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.HasIndex(new[] { "Clubid", "Userid", "Date" }, "review_clubid_userid_date_key")
                        .IsUnique();

                    b.ToTable("review");
                });

            modelBuilder.Entity("AfterX.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.HasIndex(new[] { "Name" }, "role_name_key")
                        .IsUnique();

                    b.ToTable("role");
                });

            modelBuilder.Entity("AfterX.RoleUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("role_user_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("role_user");
                });

            modelBuilder.Entity("AfterX.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<short?>("Capacity")
                        .HasColumnType("smallint")
                        .HasColumnName("capacity");

                    b.Property<int>("Clubid")
                        .HasColumnType("integer")
                        .HasColumnName("clubid");

                    b.Property<short>("Minnobottles")
                        .HasColumnType("smallint")
                        .HasColumnName("minnobottles");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<int>("Tabletypeid")
                        .HasColumnType("integer")
                        .HasColumnName("tabletypeid");

                    b.HasKey("Id");

                    b.HasIndex("Clubid");

                    b.HasIndex("Tabletypeid");

                    b.HasIndex(new[] { "Number", "Clubid" }, "table_number_clubid_key")
                        .IsUnique();

                    b.ToTable("table");
                });

            modelBuilder.Entity("AfterX.TableType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "tableType_name_key")
                        .IsUnique();

                    b.ToTable("tableType");
                });

            modelBuilder.Entity("AfterX.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex(new[] { "Email" }, "user_email_key")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("AfterX.Userattribue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("firstname");

                    b.Property<char?>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("gender");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("lastname");

                    b.Property<string>("Telephone")
                        .HasColumnType("character varying")
                        .HasColumnName("telephone");

                    b.Property<int>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.Property<DateTime?>("Yearofbirth")
                        .HasColumnType("date")
                        .HasColumnName("yearofbirth");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Userid" }, "userattribues_userid_key")
                        .IsUnique();

                    b.ToTable("userattribues");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AfterX.Address", b =>
                {
                    b.HasOne("AfterX.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("Cityid")
                        .HasConstraintName("address_cityid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("AfterX.City", b =>
                {
                    b.HasOne("AfterX.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("Countryid")
                        .HasConstraintName("city_countryid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AfterX.Club", b =>
                {
                    b.HasOne("AfterX.Address", "Address")
                        .WithMany("Clubs")
                        .HasForeignKey("Addressid")
                        .HasConstraintName("club_addressid_fkey")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AfterX.Drink", b =>
                {
                    b.HasOne("AfterX.DrinkType", "Drinktype")
                        .WithMany("Drinks")
                        .HasForeignKey("Drinktypeid")
                        .HasConstraintName("drink_drinktypeid_fkey")
                        .IsRequired();

                    b.Navigation("Drinktype");
                });

            modelBuilder.Entity("AfterX.DrinkClub", b =>
                {
                    b.HasOne("AfterX.Club", "Club")
                        .WithMany("DrinkClubs")
                        .HasForeignKey("Clubid")
                        .HasConstraintName("drink_club_clubid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AfterX.Drink", "Drink")
                        .WithMany("DrinkClubs")
                        .HasForeignKey("Drinkid")
                        .HasConstraintName("drink_club_drinkid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("AfterX.Event", b =>
                {
                    b.HasOne("AfterX.Club", "Club")
                        .WithMany("Events")
                        .HasForeignKey("Clubid")
                        .HasConstraintName("event_clubid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("AfterX.Order", b =>
                {
                    b.HasOne("AfterX.Reservation", "Reservation")
                        .WithMany("Orders")
                        .HasForeignKey("Reservationid")
                        .HasConstraintName("order_reservationid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AfterX.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("Tableid")
                        .HasConstraintName("order_tableid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("AfterX.OrderDrink", b =>
                {
                    b.HasOne("AfterX.Drink", "Drink")
                        .WithMany("OrderDrinks")
                        .HasForeignKey("Drinkid")
                        .HasConstraintName("order_drink_drinkid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AfterX.Order", "Order")
                        .WithMany("OrderDrinks")
                        .HasForeignKey("Orderid")
                        .HasConstraintName("order_drink_orderid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AfterX.PackageDrink", b =>
                {
                    b.HasOne("AfterX.Drink", "Drink")
                        .WithMany("PackageDrinks")
                        .HasForeignKey("Drinkid")
                        .HasConstraintName("package_drink_drinkid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AfterX.Package", "Package")
                        .WithMany("PackageDrinks")
                        .HasForeignKey("Packageid")
                        .HasConstraintName("package_drink_packageid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("AfterX.Reservation", b =>
                {
                    b.HasOne("AfterX.Table", "Table")
                        .WithMany("Reservations")
                        .HasForeignKey("Tableid")
                        .HasConstraintName("reservation_tableid_fkey")
                        .IsRequired();

                    b.HasOne("AfterX.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("Userid")
                        .HasConstraintName("reservation_userid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AfterX.Review", b =>
                {
                    b.HasOne("AfterX.Club", "Club")
                        .WithMany("Reviews")
                        .HasForeignKey("Clubid")
                        .HasConstraintName("review_clubid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AfterX.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("Userid")
                        .HasConstraintName("review_userid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AfterX.RoleUser", b =>
                {
                    b.HasOne("AfterX.Role", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("role_user_roleid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AfterX.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AfterX.Userattribue", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("role_user_userid_fkey")
                        .HasPrincipalKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AfterX.Table", b =>
                {
                    b.HasOne("AfterX.Club", "Club")
                        .WithMany("Tables")
                        .HasForeignKey("Clubid")
                        .HasConstraintName("table_clubid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AfterX.TableType", "Tabletype")
                        .WithMany("Tables")
                        .HasForeignKey("Tabletypeid")
                        .HasConstraintName("table_tabletypeid_fkey")
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Tabletype");
                });

            modelBuilder.Entity("AfterX.Userattribue", b =>
                {
                    b.HasOne("AfterX.User", "User")
                        .WithOne("Userattribue")
                        .HasForeignKey("AfterX.Userattribue", "Userid")
                        .HasConstraintName("userattribues_userid_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("AfterX.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AfterX.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AfterX.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AfterX.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AfterX.Address", b =>
                {
                    b.Navigation("Clubs");
                });

            modelBuilder.Entity("AfterX.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("AfterX.Club", b =>
                {
                    b.Navigation("DrinkClubs");

                    b.Navigation("Events");

                    b.Navigation("Reviews");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("AfterX.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("AfterX.Drink", b =>
                {
                    b.Navigation("DrinkClubs");

                    b.Navigation("OrderDrinks");

                    b.Navigation("PackageDrinks");
                });

            modelBuilder.Entity("AfterX.DrinkType", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("AfterX.Order", b =>
                {
                    b.Navigation("OrderDrinks");
                });

            modelBuilder.Entity("AfterX.Package", b =>
                {
                    b.Navigation("PackageDrinks");
                });

            modelBuilder.Entity("AfterX.Reservation", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("AfterX.Role", b =>
                {
                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("AfterX.Table", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("AfterX.TableType", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("AfterX.User", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("Userattribue");
                });

            modelBuilder.Entity("AfterX.Userattribue", b =>
                {
                    b.Navigation("RoleUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
